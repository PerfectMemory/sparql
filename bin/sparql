#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require 'sparql/grammar'
#require 'linkeddata'
require 'rdf'
require 'rdf/turtle'
require 'rdf/rdfxml'
require 'getoptlong'

def run(input, options = {})
  if options[:debug]
    puts "input graph:\n#{options[:graph].dump(:n3)}\n" if options[:graph]
    puts "query:\n#{input}\n"
  end
  parser = if options[:sse]
    SPARQL::Grammar::Parser.new(input, options)
  else
    SPARQL::Algebra::Parser.new(input, options)
  end
  query = parser.parse

  if options[:verbose]
    puts ("\nSPARQL:\n" + input) 
  end

  if options[:to_sse]
    puts ("\nSSE:\n" + query.to_sxp)
  else
    res = query.execute(options[:graph])
    puts res.inspect if options[:verbose]
    puts case res
    when RDF::Graph then res.dump(:ttl, :base_uri => parser.base_uri, :prefixes => parser.prefixes)
    else                 res.map {|s| s.bindings.map {|k,v| "#{k}: #{v}"}}.join("\n")
    end
  end
end

opts = GetoptLong.new(
  ["--debug", GetoptLong::NO_ARGUMENT],
  ["--dump", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--sse", GetoptLong::NO_ARGUMENT],
  ["--to-sse", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--default-graph", "-g", GetoptLong::REQUIRED_ARGUMENT],
  ["--help", "-?", GetoptLong::NO_ARGUMENT]
)

options = {
  :graph => RDF::Repository.new,
}

opts.each do |opt, arg|
  case opt
  when '--execute' then input = arg
  when '--dump' then $dump = true
  when '--debug' then options[:debug] = true
  when '--debug' then options[:sse] = true
  when '--debug' then options[:to_sse] = true
  when '--verbose' then options[:verbose] = true
  when "--default-graph" then options[:graph] = RDF::Graph.load(arg)
  when "--help"
    puts "Usage: #{$0} [options] file-or-uri ..."
    puts "Options:"
    puts "      --execute,-e:         Use option argument as the SPARQL input if no files are given"
    puts "      --default-graph:      Load default graph"
    puts "      --dump:               Dump raw output, otherwise serialize to SSE"
    puts "      --debug:              Display detailed debug output"
    puts "      --sse:                Input is in SSE format"
    puts "      --to-sse:             Generate SSE instead of running query"
    puts "      --debug:              Display detailed debug output"
    puts "      --verbose:            Display details of processing"
    puts "      --help,-?:            This message"
    exit(0)
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(s, options)
else
  ARGV.each do |test_file|
    puts "parse #{test_file}"
    run(RDF::Util::File.open_file(test_file).read, options.merge(:base_uri => RDF::URI(test_file)))
  end
end
puts