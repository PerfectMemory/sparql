{"name":"Sparql","tagline":"Ruby SPARQL library","body":"# SPARQL for RDF.rb\r\n\r\nThis is a [Ruby][] implementation of [SPARQL][] for [RDF.rb][].\r\n\r\n[![Gem Version](https://badge.fury.io/rb/sparql.png)](http://badge.fury.io/rb/sparql)\r\n\r\n[![Build Status](https://travis-ci.org/ruby-rdf/sparql.png?branch=master)](http://travis-ci.org/ruby-rdf/sparql)\r\n\r\n## Features\r\n\r\n* 100% free and unencumbered [public domain](http://unlicense.org/) software.\r\n* [SPARQL 1.1 Query][] parsing and execution (excluding [Property Paths][])\r\n* SPARQL results as [XML][SPARQL XML], [JSON][SPARQL JSON],\r\n  [CSV][SPARQL 1.1 Query Results CSV and TSV Formats],\r\n  [TSV][SPARQL 1.1 Query Results CSV and TSV Formats]\r\n  or HTML.\r\n* SPARQL CONSTRUCT or DESCRIBE serialized based on Format, Extension of Mime Type\r\n  using available RDF Writers (see [Linked Data][])\r\n* SPARQL Client for accessing remote SPARQL endpoints.\r\n* [Rack][] and [Sinatra][] middleware to perform [HTTP content negotiation][conneg] for result formats\r\n  * Compatible with any [Rack][] or [Sinatra][] application and any Rack-based framework.\r\n  * Helper method for describing [SPARQL Service Description][SSD]\r\n* Compatible with Ruby >= 1.9.2.\r\n* Compatible with older Ruby versions with the help of the [Backports][] gem.\r\n* Supports Unicode query strings both on all versions of Ruby.\r\n\r\n## Description\r\n\r\nThe {SPARQL} gem implements [SPARQL 1.1 Query][], and provides [Rack][] and [Sinatra][]\r\nmiddleware to provide results using [HTTP Content Negotiation][conneg].\r\n\r\n* {SPARQL::Grammar} implements a [SPARQL 1.1 Query][] parser generating [SPARQL S-Expressions (SSE)][SSE].\r\n  * Support for [Property Paths][] is excluded.\r\n    See the section on [SPARQL 1.1 Query][] extensions and limitations for further detail.\r\n* {SPARQL::Algebra} executes SSE against Any `RDF::Graph` or `RDF::Repository`, including\r\n  compliant [RDF.rb][] repository adaptors such as [RDF::DO][] and [RDF::Mongo][].\r\n* {Rack::SPARQL} and {Sinatra::SPARQL} provide middleware components to format results\r\n  using an appropriate format based on [HTTP content negotiation][conneg].\r\n\r\n### [SPARQL 1.1 Query][] Extensions and Limitations\r\nThe {SPARQL} gem uses the [SPARQL 1.1 Query][] {file:etc/sparql11.bnf EBNF grammar}, which provides\r\nmuch more capability than [SPARQL 1.0][], but has a few limitations:\r\n\r\n* The format for decimal datatypes has changed in [RDF 1.1][]; they may no\r\n  longer have a trailing \".\", although they do not need a leading digit.\r\n* BNodes may now include extended characters, including \".\".\r\n\r\nThe SPARQL gem now implements the following [SPARQL 1.1 Query][] operations:\r\n\r\n* [Functions](http://www.w3.org/TR/sparql11-query/#SparqlOps)\r\n* [BIND](http://www.w3.org/TR/sparql11-query/#bind)\r\n* [GROUP BY](http://www.w3.org/TR/sparql11-query/#groupby)\r\n* [Aggregates](http://www.w3.org/TR/sparql11-query/#aggregates)\r\n* [Subqueries](http://www.w3.org/TR/sparql11-query/#subqueries)\r\n* [Inline Data](http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#inline-data)\r\n* [Inline Data](http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#inline-data)\r\n* [Exists](http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#func-filter-exists)\r\n* [Negation](http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#negation)\r\n\r\nThe only major area of [SPARQL 1.1 Query][] missing is\r\n[Property Paths][], which\r\nwill be in later release along with:\r\n\r\n* [Update][SPARQL 1.1 Update],\r\n* [Federated Query][SPARQL 1.1 Federated Query],\r\n* [Entailment Regimes][SPARQL 1.1 Entailment Regimes],\r\n* [Protocol][SPARQL 1.1 Protocol], and\r\n* [Graph Store HTTP Protocol][SPARQL 1.1 Graph Store HTTP Protocol]\r\n\r\neither in this, or related gems.\r\n\r\n### Updates for RDF 1.1\r\nStarting with version 1.1.2, the SPARQL gem uses the 1.1 version of the [RDF.rb][], which adheres to [RDF 1.1 Concepts](http://www.w3.org/TR/rdf11-concepts/) rather than [RDF 1.0](http://www.w3.org/TR/rdf-concepts/). The main difference is that there is now no difference between a _Simple Literal_ (a literal with no datatype or language) and a Literal with datatype _xsd:string_; this causes some minor differences in the way in which queries are understood, and when expecting different results.\r\n\r\nAdditionally, queries now take a block, or return an `Enumerator`; this is in keeping with much of the behavior of [RDF.rb][] methods, including `Queryable#query`, and with version 1.1 or [RDF.rb][], Query#execute. As a consequence, all queries which used to be of the form `query.execute(repository)` may equally be called as `repository.query(query)`. Previously, results were returned as a concrete class implementing `RDF::Queryable` or `RDF::Query::Solutions`, these are now `Enumerators`.\r\n\r\n### SPARQL Extension Functions\r\nExtension functions may be defined, which will be invoked during query evaluation. For example:\r\n\r\n    # Register a function using the IRI <http://rubygems.org/gems/sparql#crypt>\r\n    crypt_iri = RDF::URI(\"http://rubygems.org/gems/sparql#crypt\")\r\n    SPARQL::Algebra::Expression.register_extension(crypt_iri) do |literal|\r\n      raise TypeError, \"argument must be a literal\" unless literal.literal?\r\n      RDF::Literal(literal.to_s.crypt)\r\n    end\r\n\r\nThen, use the function in a query:\r\n\r\n    PREFIX rsp: <http://rubygems.org/gems/sparql#>\r\n    PREFIX schema: <http://schema.org/>\r\n    SELECT ?crypted\r\n    {\r\n      [ schema:email ?email]\r\n      BIND(rsp:crypt(?email) AS ?crypted)\r\n    }\r\n\r\nSee {SPARQL::Algebra::Expression.register_extension} for details.\r\n\r\n### Middleware\r\n\r\n{Rack::SPARQL} is a superset of [Rack::LinkedData][] to allow content negotiated results\r\nto be returned any `RDF::Enumerable` or an enumerator extended with `RDF::Query::Solutions` compatible results.\r\nYou would typically return an instance of `RDF::Graph`, `RDF::Repository` or an enumerator extended with `RDF::Query::Solutions`\r\nfrom your Rack application, and let the `Rack::SPARQL::ContentNegotiation` middleware\r\ntake care of serializing your response into whatever format the HTTP\r\nclient requested and understands.\r\n\r\n{Sinatra::SPARQL} is a thin Sinatra-specific wrapper around the\r\n{Rack::SPARQL} middleware, which implements SPARQL\r\n content negotiation for Rack applications. {Sinatra::SPARQL} also supports\r\n [SPARQL 1.1 Service Description][].\r\n\r\nThe middleware queries [RDF.rb][] for the MIME content types of known RDF\r\nserialization formats, so it will work with whatever serialization plugins\r\nthat are currently available for RDF.rb. (At present, this includes support\r\nfor N-Triples, N-Quads, Turtle, RDF/XML, RDF/JSON, JSON-LD, RDFa, TriG and TriX.)\r\n\r\n### Remote datasets\r\n\r\nA SPARQL query containing `FROM` or `FROM NAMED` will load the referenced IRI unless the repository\r\nalready contains a context with that same IRI. This is performed using [RDF.rb][] `RDF::Util::File.open_file`\r\npassing HTTP Accept headers for various available RDF formats. For best results, require [Linked Data][] to enable\r\na full set of RDF formats in the `GET` request. Also, consider overriding `RDF::Util::File.open_file` with\r\nan implementation with support for HTTP Get headers (such as `Net::HTTP`).\r\n\r\nQueries using datasets are re-written to use the identified graphs for `FROM` and `FROM NAMED` by filtering the results, allowing the use of a repository that contains many graphs without confusing information.\r\n\r\n### Result formats\r\n\r\n`SPARQL.serialize_results` may be used on it's own, or in conjunction with {Rack::SPARQL} or {Sinatra::SPARQL}\r\nto provide content-negotiated query results. For basic `SELECT` and `ASK` this includes HTML, XML, CSV, TSV and JSON formats.\r\n`DESCRIBE` and `CONSTRUCT` create an `RDF::Graph`, which can be serialized through [HTTP Content Negotiation][conneg]\r\nusing available RDF writers. For best results, require [Linked Data][] to enable\r\na full set of RDF formats.\r\n\r\n## Examples\r\n\r\n    require 'rubygems'\r\n    require 'sparql'\r\n\r\n### Querying a repository with a SPARQL query\r\n\r\n    queryable = RDF::Repository.load(\"etc/doap.ttl\")\r\n    sse = SPARQL.parse(\"SELECT * WHERE { ?s ?p ?o }\")\r\n    queryable.query(sse) do |result|\r\n      result.inspect\r\n    end\r\n\r\n### Executing a SPARQL query against a repository\r\n\r\n    queryable = RDF::Repository.load(\"etc/doap.ttl\")\r\n    sse = SPARQL.parse(\"SELECT * WHERE { ?s ?p ?o }\")\r\n    sse.execute(queryable) do |result|\r\n      result.inspect\r\n    end\r\n\r\n### Rendering solutions as JSON, XML, CSV, TSV or HTML\r\n    queryable = RDF::Repository.load(\"etc/doap.ttl\")\r\n    solutions = SPARQL.execute(\"SELECT * WHERE { ?s ?p ?o }\", queryable)\r\n    solutions.to_json #to_xml #to_csv #to_tsv #to_html\r\n\r\n### Parsing a SPARQL query string to SSE\r\n\r\n    sse = SPARQL.parse(\"SELECT * WHERE { ?s ?p ?o }\")\r\n    sse.to_sxp #=> (bgp (triple ?s ?p ?o))\r\n\r\n### Command line processing\r\n\r\n    sparql --default-graph etc/doap.ttl etc/from_default.rq\r\n    sparql -e \"SELECT * FROM <etc/doap.ttl> WHERE { ?s ?p ?o }\"\r\n\r\n    # Generate SPARQL Algebra Expression (SSE) format\r\n    sparql --to-sse etc/input.rq\r\n    sparql --to-sse -e \"SELECT * WHERE { ?s ?p ?o }\"\r\n\r\n    # Run query using SSE input\r\n    sparql --default-graph etc/doap.ttl --sse etc/input.sse\r\n    sparql --sse -e \"(dataset (<etc/doap.ttl>) (bgp (triple ?s ?p ?o))))\"\r\n\r\n### Adding SPARQL content negotiation to a Rails 3.x application\r\n\r\n    # config/application.rb\r\n    require 'rack/sparql'\r\n    \r\n    class Application < Rails::Application\r\n      config.middleware.use Rack::SPARQL::ContentNegotiation\r\n    end\r\n\r\n### Adding SPARQL content negotiation to a Rackup application\r\n\r\n    #!/usr/bin/env rackup\r\n    require 'rack/sparql'\r\n    \r\n    repository = RDF::Repository.new do |graph|\r\n      graph << [RDF::Node.new, RDF::DC.title, \"Hello, world!\"]\r\n    end\r\n    results = SPARQL.execute(\"SELECT * WHERE { ?s ?p ?o }\", repository)\r\n    \r\n    use Rack::SPARQL::ContentNegotiation\r\n    run lambda { |env| [200, {}, results] }\r\n\r\n### Adding SPARQL content negotiation to a classic Sinatra application\r\n\r\n    # Sinatra example\r\n    #\r\n    # Call as http://localhost:4567/sparql?query=uri,\r\n    # where `uri` is the URI of a SPARQL query, or\r\n    # a URI-escaped SPARQL query, for example:\r\n    #   http://localhost:4567/?query=SELECT%20?s%20?p%20?o%20WHERE%20%7B?s%20?p%20?o%7D\r\n    require 'sinatra'\r\n    require 'sinatra/sparql'\r\n    require 'uri'\r\n\r\n    get '/' do\r\n      settings.sparql_options.replace(:standard_prefixes => true)\r\n      repository = RDF::Repository.new do |graph|\r\n        graph << [RDF::Node.new, RDF::DC.title, \"Hello, world!\"]\r\n      end\r\n      if params[\"query\"]\r\n        query = params[\"query\"].to_s.match(/^http:/) ? RDF::Util::File.open_file(params[\"query\"]) : ::URI.decode(params[\"query\"].to_s)\r\n        SPARQL.execute(query, repository)\r\n      else\r\n        settings.sparql_options.merge!(:prefixes => {\r\n          :ssd => \"http://www.w3.org/ns/sparql-service-description#\",\r\n          :void => \"http://rdfs.org/ns/void#\"\r\n        })\r\n        service_description(:repo => repository)\r\n      end\r\n    end\r\n\r\nFind more examples in {SPARQL::Grammar} and {SPARQL::Algebra}.\r\n\r\n## Documentation\r\n\r\nFull documentation available on [Rubydoc.info][SPARQL doc]\r\n\r\n### Principle Classes\r\n\r\n* {SPARQL}\r\n  * {SPARQL::Algebra}\r\n    * {SPARQL::Algebra::Expression}\r\n    * {SPARQL::Algebra::Query}\r\n    * {SPARQL::Algebra::Operator}\r\n  * {SPARQL::Grammar}\r\n    * {SPARQL::Grammar::Parser}\r\n* {Sinatra::SPARQL}\r\n* {Rack::SPARQL}\r\n  * {Rack::SPARQL::ContentNegotiation}\r\n\r\n## Dependencies\r\n\r\n* [Ruby](http://ruby-lang.org/) (>= 1.9.2)\r\n* [RDF.rb](http://rubygems.org/gems/rdf) (>= 1.0.7)\r\n* [SPARQL::Client](https://rubygems.org/gems/sparql-client) (>= 1.0.3)\r\n* [SXP](https://rubygems.org/gems/sxp) (>= 0.1.0)\r\n* [Builder](https://rubygems.org/gems/builder) (>= 3.0.0)\r\n* [JSON](https://rubygems.org/gems/json) (>= 1.5.1)\r\n* Soft dependency on [Linked Data][] (>= 1.0)\r\n* Soft dependency on [Nokogiri](http://rubygems.org/gems/nokogiri) (>= 1.5.0)\r\n  Falls back to REXML for XML parsing Builder for XML serializing. Nokogiri is much more efficient\r\n* Soft dependency on [Equivalent XML](https://rubygems.org/gems/equivalent-xml) (>= 0.3.0)\r\n  Equivalent XML performs more efficient comparisons of XML Literals when Nokogiri is included\r\n* Soft dependency on [Rack][] (>= 1.4.4)\r\n* Soft dependency on [Sinatra][] (>= 1.3.3)\r\n\r\n## Installation\r\n\r\nThe recommended installation method is via [RubyGems](http://rubygems.org/).\r\nTo install the latest official release of the `SPARQL` gem, do:\r\n\r\n    % [sudo] gem install sparql\r\n\r\n## Download\r\n\r\nTo get a local working copy of the development repository, do:\r\n\r\n    % git clone git://github.com/ruby-rdf/sparql.git\r\n\r\n## Mailing List\r\n\r\n* <http://lists.w3.org/Archives/Public/public-rdf-ruby/>\r\n\r\n## Authors\r\n\r\n* [Gregg Kellogg](http://github.com/gkellogg) - <http://greggkellogg.net/>\r\n* [Arto Bendiken](http://github.com/bendiken) - <http://ar.to/>\r\n* [Pius Uzamere](http://github.com/pius) - <http://pius.me/>\r\n\r\n## Contributing\r\nThis repository uses [Git Flow](https://github.com/nvie/gitflow) to mange development and release activity. All submissions _must_ be on a feature branch based on the _develop_ branch to ease staging and integration.\r\n\r\n* Do your best to adhere to the existing coding conventions and idioms.\r\n* Don't use hard tabs, and don't leave trailing whitespace on any line.\r\n* Do document every method you add using [YARD][] annotations. Read the\r\n  [tutorial][YARD-GS] or just look at the existing code for examples.\r\n* Don't touch the `.gemspec`, `VERSION` or `AUTHORS` files. If you need to\r\n  change them, do so on your private branch only.\r\n* Do feel free to add yourself to the `CREDITS` file and the corresponding\r\n  list in the the `README`. Alphabetical order applies.\r\n* Do note that in order for us to merge any non-trivial changes (as a rule\r\n  of thumb, additions larger than about 15 lines of code), we need an\r\n  explicit [public domain dedication][PDD] on record from you.\r\n\r\n## License\r\n\r\nThis is free and unencumbered public domain software. For more information,\r\nsee <http://unlicense.org/> or the accompanying {file:UNLICENSE} file.\r\n\r\nA copy of the [SPARQL EBNF][] and derived parser files are included in the repository, which are not covered under the UNLICENSE. These files are covered via the [W3C Document License](http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231).\r\n\r\nA copy of the [SPARQL 1.0 tests][] and [SPARQL 1.1 tests][] are also included in the repository, which are not covered under the UNLICENSE; see the references for test copyright information.\r\n\r\n[Ruby]:             http://ruby-lang.org/\r\n[RDF]:              http://www.w3.org/RDF/\r\n[RDF::DO]:          http://rubygems.org/gems/rdf-do\r\n[RDF::Mongo]:       http://rubygems.org/gems/rdf-mongo\r\n[Rack::LinkedData]: http://rubygems.org/gems/rack-linkeddata\r\n[YARD]:             http://yardoc.org/\r\n[YARD-GS]:          http://rubydoc.info/docs/yard/file/docs/GettingStarted.md\r\n[PDD]:              http://lists.w3.org/Archives/Public/public-rdf-ruby/2010May/0013.html\r\n[SPARQL]:           http://en.wikipedia.org/wiki/SPARQL\r\n[SPARQL 1.0]:       http://www.w3.org/TR/rdf-sparql-query/\r\n[SPARQL 1.0 tests]:http://www.w3.org/2001/sw/DataAccess/tests/\r\n[SPARQL 1.1 tests]: http://www.w3.org/2009/sparql/docs/tests/\r\n[SSE]:              http://openjena.org/wiki/SSE\r\n[SXP]:              http://sxp.rubyforge.org/\r\n[grammar]:          http://www.w3.org/TR/rdf-sparql-query/#grammar\r\n[RDF 1.1]:          http://www.w3.org/TR/rdf11-concepts\r\n[RDF.rb]:           http://rdf.rubyforge.org/\r\n[Backports]:        http://rubygems.org/gems/backports\r\n[Linked Data]:      http://rubygems.org/gems/linkeddata\r\n[SPARQL doc]:       http://rubydoc.info/github/ruby-rdf/sparql/frames\r\n[SPARQL XML]:       http://www.w3.org/TR/rdf-sparql-XMLres/\r\n[SPARQL JSON]:      http://www.w3.org/TR/rdf-sparql-json-res/\r\n[SPARQL EBNF]:      http://www.w3.org/TR/sparql11-query/#sparqlGrammar\r\n[Property Paths]:   http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#propertypaths\r\n\r\n[SSD]:              http://www.w3.org/TR/sparql11-service-description/\r\n[Rack]:             http://rack.rubyforge.org/\r\n[Sinatra]:          http://www.sinatrarb.com/\r\n[conneg]:           http://en.wikipedia.org/wiki/Content_negotiation\r\n\r\n[SPARQL 1.1 Query]:                             http://www.w3.org/TR/sparql11-query/\r\n[SPARQL 1.1 Update]:                            http://www.w3.org/TR/sparql11-update/\r\n[SPARQL 1.1 Service Description]:               http://www.w3.org/TR/sparql11-service-description/\r\n[SPARQL 1.1 Federated Query]:                   http://www.w3.org/TR/sparql11-federated-query/\r\n[SPARQL 1.1 Query Results JSON Format]:         http://www.w3.org/TR/sparql11-results-json/\r\n[SPARQL 1.1 Query Results CSV and TSV Formats]: http://www.w3.org/TR/sparql11-results-csv-tsv/\r\n[SPARQL Query Results XML Format]:              http://www.w3.org/TR/rdf-sparql-XMLres/\r\n[SPARQL 1.1 Entailment Regimes]:                http://www.w3.org/TR/sparql11-entailment/\r\n[SPARQL 1.1 Protocol]:                          http://www.w3.org/TR/sparql11-protocol/\r\n[SPARQL 1.1 Graph Store HTTP Protocol]:         http://www.w3.org/TR/sparql11-http-rdf-update/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}