#!/usr/bin/env ruby
require 'rubygems'
require "bundler/setup"
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec')))
require 'rdf'
require 'rdf/isomorphic'
require 'rspec'
require 'sparql'
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'spec_helper'))
require File.expand_path(File.join(File.dirname(__FILE__), "..", 'spec', 'dawg_helper'))
require 'getoptlong'

def run_tc(t, options = {})
  options[:msg] ||= {}
  options[:tests] ||= 0
  options[:tests] += 1
  STDOUT.write "run #{t.name}" unless options[:quiet]

  query = options[:sse] ? t.action.sse_string : t.action.query_string
  puts "\n" + query if options[:verbose]

  puts t.inspect if options[:verbose]

  graphs = t.graphs
  expected = t.solutions

  graphs.each {|k, s| puts "#{k}:\n#{s[:data]}\n"} if options[:verbose]

  result = sparql_query(:graphs => graphs, :query => query, :sse => !!options[:sse],
                        :base_uri => t.action.query_file,
                        :repository => "sparql-spec", :form => t.form, :to_hash => false)

  puts "expected: #{expected.inspect}" if options[:verbose]
  puts "result: #{result.inspect}" if options[:verbose]

  case t.form
  when :select, :create, :describe, :construct
    if result.isomorphic_with?(expected)
      STDOUT.write(options[:quiet] ? "." : " ok\n")
    else
      options[:failures] ||= {}
      options[:failures][t] = %{
expected:\n#{expected.inspect}
actual:\n#{result.inspect}
}
      options[:failures][t] += "\nmissing:\n#{(expected - result).inspect}" unless (expected - result).empty?
      options[:failures][t] += "\nextra:\n#{(expected - result).inspect}" unless (result - expected).empty?
      STDOUT.write(options[:quiet] ? "F" : (" failed" + options[:failures][t]))
    end
  when :ask
    if result
      STDOUT.write(options[:quiet] ? "." : " ok\n")
    else
      options[:failures] ||= {}
      options[:failures][t] = "\nFailed"
      STDOUT.write(options[:quiet] ? "F" : " failed\n")
    end
  else
    STDOUT.puts "unknown form #{t.form.inspect}"
    exit(1)
  end
rescue Interrupt
  exit(1)
rescue Exception => e
  if options[:quiet]
    STDOUT.write("E")
    options[:exceptions] ||= {}
    options[:exceptions][t] = e.message
  else
    STDOUT.puts("\n#{e.message}")
    STDOUT.puts e.backtrace
  end
end

options = {
  :verbose  => false,
  :quite    => false,
  :validate => false,
}
suite = "rdfxml"
opts = GetoptLong.new(
  ["--exec-debug", GetoptLong::NO_ARGUMENT],
  ["--parser-debug", GetoptLong::NO_ARGUMENT],
  ["--sse", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--validate' then options[:validate] = true
  when '--verbose' then options[:verbose] = true; ENV['PARSER_DEBUG'] = "2"
  when '--quiet' then options[:quiet] = true
  when '--sse' then options[:sse] = true
  when '--exec-debug' then ENV['EXEC_DEBUG'] = "true"; options[:verbose] = true
  when '--parser-debug' then ENV['PARSER_DEBUG'] = "3"; options[:verbose] = true
  end
end

test_cases = SPARQL::Spec.sparql1_0_tests + SPARQL::Spec.sparql1_1_tests

test_cases.each do |tc|
  next unless ARGV.empty? || ARGV.any? {|n| tc.entry.match(/#{n}/)}
  run_tc(tc, options)
end

if options[:quiet]
  puts ""
  if options[:exceptions]
    puts "\nExceptions:"
    options[:exceptions].each do |t, m|
      puts "#{t.name}: #{m}"
    end
  end
  if options[:failures]
    puts "\nFailures"
    options[:failures].each do |t, m|
      puts "#{t.name}:#{m}"
    end
  end

  msg = "#{options[:tests]} Tests"
  msg += ", #{options[:failures].length} Failures" if options[:failures]
  msg += ", #{options[:exceptions].length} Exceptions" if options[:exceptions]
  puts msg
end